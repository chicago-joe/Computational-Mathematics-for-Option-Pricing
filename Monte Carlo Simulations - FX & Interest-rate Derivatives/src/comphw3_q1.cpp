//  Computational Homework #3
//  UIUC - IE525 - Spring 2019
//
//  Created by Joseph Loss on 4/10/2019
//
// Question 1

#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <chrono>
#include <random>

#define E 2.718281828459045

using namespace std;

double rf_rate, drift_rate, strike_price, initial_stock_price, T, sigma, deltat;
int no_of_trials;

unsigned seed = (unsigned) std::chrono::system_clock::now().time_since_epoch().count();
std::default_random_engine generator(seed);

// u.i.i.d. generator
double get_uniform() {
    std::uniform_real_distribution<double> distribution(0.0, 1.0);
    double number = distribution(generator);
    return (number);
}

double max(double a, double b) {
    return (b < a) ? a : b;
}

// returns exponential value of the number in parameter
double exp(double n) {
    return pow(E, n);
}

// simulate GBM path
double simulatePath_GBM(double initial_stock_price, double drift_rate, double sigma, double deltat, double T, int flag) {
    int n = round(T / deltat); //to ensure n is even
    double *S = new double[n + 1]; //stores simulated stock price values
    S[0] = initial_stock_price;

    //
    for (int i = 1; i <= n / 2; i++) {
        double x = get_uniform();
        double y = get_uniform();
        double a = sqrt(-2.0 * log(x)) * cos(6.283185307999998 * y);
        double b = sqrt(-2.0 * log(x)) * sin(6.283185307999998 * y);

        // normally distributed random values generated by Box-Muller are used to simulate asset paths
        S[i] = S[i - 1] * exp((drift_rate - 0.5 * pow(sigma, 2)) * deltat + sigma * sqrt(deltat) * a);
        S[i + 1] = S[i] * exp((drift_rate - 0.5 * pow(sigma, 2)) * deltat + sigma * sqrt(deltat) * b);
    }
    // if Asian options:
    if (flag == 1)
    {
        double avg_price = 0;
        for (int i = 0; i < n; i++)
            avg_price += S[i] / n;
        return avg_price;
    }
    return S[n];
}

double option_price_mc_european_call(double initial_stock_price, double drift_rate, double sigma, double deltat, double T, double strike_price, double rf_rate, int no_of_trials) {
    double option_price = 0;
    for (int i = 0; i < no_of_trials; i++)
        option_price += exp(-rf_rate * T) * max(0, simulatePath_GBM(initial_stock_price, drift_rate, sigma, deltat, T, 0) - strike_price) / no_of_trials;
    return option_price;
}

double option_price_mc_european_put(double initial_stock_price, double drift_rate, double sigma, double deltat, double T, double strike_price, double rf_rate, int no_of_trials) {
    double option_price = 0;
    for (int i = 0; i < no_of_trials; i++)
        option_price += exp(-rf_rate * T) * max(0, strike_price - simulatePath_GBM(initial_stock_price, drift_rate, sigma, deltat, T, 0)) / no_of_trials;
    return option_price;
}

double option_price_mc_asian_call(double initial_stock_price, double drift_rate, double sigma, double deltat, double T, double strike_price, double rf_rate, int no_of_trials) {
    double option_price = 0;
    for (int i = 0; i < no_of_trials; i++)
        option_price += exp(-rf_rate * T) * max(0, simulatePath_GBM(initial_stock_price, drift_rate, sigma, deltat, T, 1) - strike_price) / no_of_trials;
    return option_price;
}

double variance_mc_european_call(double initial_stock_price, double drift_rate, double sigma, double deltat, double T, double strike_price, double rf_rate, int no_of_trials) {
    //storing simulated option prices in an array to use to calculate variance and the Monte Carlo estimated mean
    double MC_estimator = 0;
    double *option_prices = new double[no_of_trials + 1];
    double variance = 0;

    for (int i = 0; i < no_of_trials; i++) {
        option_prices[i] = exp(-rf_rate * T) * max(0, simulatePath_GBM(initial_stock_price, drift_rate, sigma, deltat, T, 0) - strike_price);
        MC_estimator += option_prices[i] / no_of_trials;                                            //adding all the values to find the Monte Carlo estimated mean
    }
    for (int i = 0; i < no_of_trials; i++)
        variance += pow(option_prices[i] - MC_estimator, 2) / (no_of_trials - 1);                   //using the Monte Carlo variance formula to find the estimated call option variance
    return variance;
}

double variance_mc_european_put(double initial_stock_price, double drift_rate, double sigma, double deltat, double T, double strike_price, double rf_rate, int no_of_trials) {
    double MC_estimator = 0;
    double *option_prices = new double[no_of_trials + 1];
    double variance = 0;
    for (int i = 0; i < no_of_trials; i++) {
        option_prices[i] = exp(-rf_rate * T) * max(0, strike_price - simulatePath_GBM(initial_stock_price, drift_rate, sigma, deltat, T, 0));
        MC_estimator += option_prices[i] / no_of_trials;
    }
    for (int i = 0; i < no_of_trials; i++)
        variance += pow(option_prices[i] - MC_estimator, 2) / (no_of_trials - 1);
    return variance;
}

double variance_mc_asian_call(double initial_stock_price, double drift_rate, double sigma, double deltat, double T, double strike_price, double rf_rate, int no_of_trials) {
    double MC_estimator = 0;
    double *G = new double[no_of_trials + 1];
    double variance = 0;
    for (int i = 0; i < no_of_trials; i++) {
        G[i] = exp(-rf_rate * T) * max(0, simulatePath_GBM(initial_stock_price, drift_rate, sigma, deltat, T, 1) - strike_price);
        MC_estimator += G[i] / no_of_trials;
    }
    for (int i = 0; i < no_of_trials; i++)
        variance += pow(G[i] - MC_estimator, 2) / (no_of_trials - 1);
    return variance;
}


int main() {
    drift_rate = 0.1;
    sigma = 0.15;
    initial_stock_price = 15;
    strike_price = 16;
    T = 1.0;
    rf_rate = 0.0;
    no_of_trials = 10000;
    deltat = 0.4167;              //  = 1/24

    //cout << "Computational Homework 3: Question 1 " << endl;
    cout << "Monte-Carlo Pricing for European and Asian Calls" << endl;
    cout << "Input Parameters: " << endl;
    cout << "Expiration Time (Years) = " << T << endl;
    cout << "Drift Rate = " << drift_rate << endl;
    cout << "Risk-free rate = " << rf_rate << endl;
    cout << "Volatility (%age of stock value) = " << sigma * 100 << endl;
    cout << "Initial Stock Price = " << initial_stock_price << endl;
    cout << "Strike Price = " << strike_price << endl;
    cout << "Number of Trials = " << no_of_trials << endl;
    cout << "--------------------------------" << endl;
    cout << "--------------------------------" << endl;
    cout << "European Call Option Price = " << option_price_mc_european_call(initial_stock_price, drift_rate, sigma, deltat, T, strike_price, rf_rate, no_of_trials) << endl;
    cout << "European Put Option Price = " << option_price_mc_european_put(initial_stock_price, drift_rate, sigma, deltat, T, strike_price, rf_rate, no_of_trials) << endl;
    cout << "European Call Variance = " << variance_mc_european_call(initial_stock_price, drift_rate, sigma, deltat, T, strike_price, rf_rate, no_of_trials) << endl;
    cout << "European Put Variance = " << variance_mc_european_put(initial_stock_price, drift_rate, sigma, deltat, T, strike_price, rf_rate, no_of_trials) << endl;
    cout << "Asian Call Option Price = " << option_price_mc_asian_call(initial_stock_price, drift_rate, sigma, deltat, T, strike_price, rf_rate, no_of_trials) << endl;
    cout << "Asian Call Variance = " << variance_mc_asian_call(initial_stock_price, drift_rate, sigma, deltat, T, strike_price, rf_rate, no_of_trials) << endl;
    cout << endl;

    system("pause");
}

